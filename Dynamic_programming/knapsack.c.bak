#include <sys/types.h>
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
#include "knapsack.h"

void generate_objects(struct object *objects, int no_objects){
    int iterator;
    time_t t;

    srand((unsigned) time(&t));
    for(iterator = 1; iterator <= no_objects; iterator++){
        objects[iterator].id = iterator;
        objects[iterator].size = rand() % 10 + 1;
        objects[iterator].value = rand() % 10 + 1;
    }
}

void print_objects(struct object *objects, int no_objects){
    int iterator;

    printf("\n Objects:");
    for (iterator = 1; iterator <= no_objects ; iterator++) {
        printf("\n id: %d size: %d value: %d",objects[iterator].id, objects[iterator].size, objects[iterator].value);
    }
}

void set_matrix_value(struct a_matrix matrix, int row_index, int column_index, int element_value){
    int position;
    if (column_index == 0){
        printf("da");
    }
    position = row_index * matrix.no_cols + column_index;
    *(matrix.matrix + position) = element_value;
}


int get_matrix_value(struct a_matrix matrix, int row_index, int column_index){
    int position;

    position = row_index * matrix.no_cols + column_index;
    return *(matrix.matrix + position);
}

void print_matrix(struct a_matrix matrix){
    int iterator_rows;
    int iterator_columns;

    printf("\n === Matrix === \n");
    for(iterator_rows = 0; iterator_rows < matrix.no_rows; iterator_rows++){
        for(iterator_columns = 0; iterator_columns < matrix.no_cols; iterator_columns++){
            printf("%d ",matrix.matrix[iterator_rows * matrix.no_cols + iterator_columns]);
        }
        printf("\n");
    }
}

int get_max(int val1, int val2){
    if (val1 > val2){
        return val1;
    }else{
        return val2;
    }
}

void dynamic_programming_knapsack_discrete(struct object *objects, int no_objects, int knapsack_capacity){
    struct a_matrix matrix;
    int knapsack_value;
    int objects_iterator;
    int weight_iterator;
    int value_current_size_without_current_obj;
    int value_remaining_size_wthout_current_obj;
    int value_current_size_plus_current_obj;
    int value_max;
    int knapsack_remaining_capacity;

    matrix.no_rows = no_objects + 1;
    matrix.no_cols = knapsack_capacity + 1;
    matrix.matrix = calloc((matrix.no_rows) * (matrix.no_cols), sizeof(int));

    ///To be implemented

    knapsack_value = get_matrix_value(matrix, matrix.no_rows - 1, matrix.no_cols - 1);
    print_matrix(matrix);
    free(matrix.matrix);

    printf("\n=== Value in the knapsack %d ===", knapsack_value);
}
